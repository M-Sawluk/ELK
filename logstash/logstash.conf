input {
  beats {
    port => 5044
  }
}

filter { 
    if ([source] =~ /.*mas_mobile.*/ and [fields][user] =~ /.*ca.*/) {
	   grok {
            patterns_dir => ["./patterns"]
            match => { "message" => "%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{BRACKETS:SESSION}%{BRACKETS:HTTP_REQ}%{GREEDYDATA:STACKTRACE}"}
            remove_field => "message"
           }  
    }
    if ([source] =~ /.*mas_application.*/ and [fields][user] =~ /.*ca.*/) {
	   grok {
            patterns_dir => ["./patterns"]
            match => { "message" => ["%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{BRACKETS:SESSION}%{HTTP:HTTP_REQ} %{BRACKETS:OPERATION} %{BRACKETS:IP} %{BRACKETS:APP_ID} %{BRACKETS:DEV_ID} %{BRACKETS:PLATFORM} %{BRACKETS:VERSION} %{BRACKETS:TIME} %{GREEDYDATA:STACKTRACE}","%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{BRACKETS:SESSION}%{HTTP:HTTP_REQ} %{BRACKETS:OPERATION} %{BRACKETS:IP} %{BRACKETS:APP_ID} %{BRACKETS:DEV_ID} %{BRACKETS:PLATFORM} %{BRACKETS:VERSION} %{GREEDYDATA:STACKTRACE}","%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{BRACKETS:SESSION}%{BRACKETS:HTTP_REQ} %{REST_OF_LINE:INFO}%{GREEDYDATA:STACKTRACE}","%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{BRACKETS:SESSION}%{BRACKETS:HTTP_REQ} %{BRACKETS:SESSIONID} %{REST_OF_LINE:INFO}%{GREEDYDATA:STACKTRACE}"]}
            remove_field => "message"
           }  
    }
    if ([source] =~ /.*mas_webservices.*/ and [fields][user] =~ /.*ca.*/) {
	   grok {
            patterns_dir => ["./patterns"]
            match => { "message" => "%{WSDATE:LOG_DATE}%{BRACKETS:LOG_LVL}%{BRACKETS:file}%{SESSION:SESSION}%{HTTP:HTTP_REQ} %{BRACKETS:OPERATION} %{CLASS:CLASS} %{SOAP_RPC:SOAP}%{GREEDYDATA:STACKTRACE}"}
            remove_field => "message"
           }  
    }
    if ([source] =~ /.*mas_activity.*/ and [fields][user] =~ /.*ca.*/) {
	   grok {
            patterns_dir => ["./patterns"]
            match => { "message" => "%{WSDATE:LOG_DATE}%{WSWORDS:LOG_LVL}%{BRACKETS:file}%{SESSION:SESSION}%{HTTP:HTTP_REQ} %{BRACKETS:OPERATION} %{BRACKETS:IP} %{BRACKETS:APPID} %{BRACKETS:DEVICEID} %{BRACKETS:PLATFORM} %{BRACKETS:VERSION} %{BRACKETS:MANUFACTURER} %{BRACKETS:MODEL} %{BRACKETS:DEVICE_DESCRIPTION} %{BRACKETS:LANG} %{BRACKETS:CUSTOMERID} %{BRACKETS:TIME} %{GREEDYDATA:STACKTRACE}"}
            remove_field => "message" 
           }  
    }
    if ([source] =~ /.*mas_communication.*/ and [fields][user] =~ /.*ca.*/) {
        mutate {
            gsub => ["message" , "\n" , "|"]
            gsub => ["message" , "(\|.*\|(?=User))|(\|.*(?=<rt))|(\|.*(?=<\?xml))" , ""]

        }
        grok {
            patterns_dir => ["./patterns"]
            match => { "message" => 
                        ["%{WSDATE:LOG_DATE}%{WSWORDS:LOG_LVL}%{BRACKETS:file}%{SESSION:SESSION}%{HTTP:HTTP_REQ} %{USER_AGENT:USERAGENT}%{SOAP_REQUEST:SOAP_REQUEST}%{GREEDYDATA:STACKTRACE}","%{WSDATE:LOG_DATE}%{WSWORDS:LOG_LVL}%{BRACKETS:file}%{SESSION:SESSION}%{HTTP:HTTP_REQ} %{SOAP_RESPONSE:SOAP_RESPONSE}%{GREEDYDATA:STACKTRACE}"]}
            remove_field => "message"
        }     
    }
    mutate {
           gsub => ["LOG_DATE", "[\[\]]|(\+[0-9]{2}:[0-9]{2})", ""]
           gsub => ["LOG_DATE", " ", "T"]           
    }
        
}
        
output {
    elasticsearch { 
    hosts => ["elasticsearch:9200"]
    index => "%{[fields][user]}-%{file}-%{+YYYY.MM.dd}"
    }
    stdout { codec => rubydebug }
}

